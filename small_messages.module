<?php

/**
 * @file
 * Contains small_messages.module.
 */

use Drupal\Component\Render\FormattableMarkup;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Url;
use Drupal\node\NodeInterface;
use Drupal\views\ViewExecutable;


/**
 * Implements hook_help().
 */
function small_messages_help($route_name, RouteMatchInterface $route_match)
{
    switch ($route_name) {
        // Main module help for the small_messages module.
        case 'help.page.small_messages':
            $output = '';
            $output .= '<h3>' . t('About') . '</h3>';
            $output .= '<p>' . t('Ein kleines Nachrichten-System') . '</p>';
            return $output;

        default:
    }
}


/**
 * Implements hook_theme().
 */
function small_messages_theme($existing, $type, $theme, $path)
{
    $module_path = drupal_get_path('module', 'small_messages');

    $templates = $path . $module_path . '/templates';


    return [
        'small_messages' => [
            'render element' => 'children',
        ],
        'icon' => [
            'variables' => ['icon' => NULL],
        ]

    ];
}


/**
 * Implements hook_mail().
 */
function small_messages_mail($key, &$message, $params)
{

    switch ($key) {


        case 'EMAIL_PLAIN':

            $message['from'] = $params['from'];
            $message['subject'] = $params['title'];
            $message['body'][] = $params['message'];
            break;


        case 'EMAIL_SMTP' :

            $message['from'] = $params['from'];
            $message['subject'] = $params['title'];
            $message['headers'] = [
                'MIME-Version' => '1.0',
                'Content-Type' => "multipart/alternative",
                'Content-Transfer-Encoding' => '8Bit',
                'X-Mailer' => 'Drupal',
            ];
            $message['body'][] = "\r\n--\r\n";
            $message['body'][] = 'Content-Type: text/plain; charset=utf-8;';
            $message['body'][] = $params['message'];
            $message['body'][] = "\r\n--\r\n";
            $message['body'][] = "Content-Type: text/html; charset=utf-8;";
            $message['body'][] = $params['htmltext'];
            $message['body'][] = "\r\n-- --\r\n";
            break;
    }

}


/**
 *
 * Implements hook_node_access().
 *
 * @param NodeInterface $node
 * @param $op
 * @param AccountInterface $account
 * @return \Drupal\Core\Access\AccessResultForbidden|\Drupal\Core\Access\AccessResultNeutral
 */
function small_messages_node_access(NodeInterface $node, $op, AccountInterface $account)
{
    $restricted_bundles = ['member'];
    $role_id = 'small_messages';

    $bundle_id = $node->bundle();
    $roles = $account->getRoles();

    // Default checks
    if (!is_object($node)) {
        return AccessResult::neutral();
    } else {

        // block http://example.com/node/123
        $parameter_node = \Drupal::routeMatch()->getRawParameter('node');

        if ($op == 'view' && $parameter_node == $node->id()) {

            // Allow for admin roles
            if (in_array($bundle_id, $restricted_bundles) && in_array($role_id, $roles)) {
                return AccessResult::neutral();

            } else {
                // Restrict access to full node for others
                return AccessResult::forbidden();
            }
        }
    }

    // Default
    return AccessResult::neutral();

}

function small_messages_views_pre_render(ViewExecutable $view)
{

    //   dpm($view->id());
    //   dpm($view->current_display);

    $view_id = "messages";
    $display_id_messages = 'page_1';
    $display_id_members = 'page_2';

    if (isset($view) && ($view->storage->id() == $view_id)) {

        $view->element['#attached']['library'][] = 'small_messages/small_messages.main';
    }

    if (isset($view) && ($view->storage->id() == $view_id) && ($view->current_display == $display_id_messages)) {
    }

    if (isset($view) && ($view->storage->id() == $view_id) && ($view->current_display == $display_id_members)) {
    }
}

function small_messages_preprocess_page(&$variables)
{
    $node = \Drupal::routeMatch()->getParameter('node');
    if ($node) {
        //    $variables['title'] = $node->getTitle();
        $variables['title'] = 'holla page';
        //   $variables['title_prefix'] = '<i class="fas fa-duck"></i>i>';
        $variables['title_prefix'] = '<i class="fas fa-duck"></i>i>';
    }
}


/**
 * Implements hook_preprocess_HOOK() for page title templates.
 */
function small_messages_preprocess_page_title(&$variables)
{
    // Since the title and the shortcut link are both block level elements,
    // positioning them next to each other is much simpler with a wrapper div.
    if (!empty($variables['title_suffix']['add_or_remove_shortcut']) && $variables['title']) {
        // Add a wrapper div using the title_prefix and title_suffix render
        // elements.
        $variables['title_prefix']['shortcut_wrapper'] = [
            '#markup' => '<div class="shortcut-wrapper clearfix">',
            '#weight' => 100,
        ];
        $variables['title_suffix']['shortcut_wrapper'] = [
            '#markup' => '</div>',
            '#weight' => -99,
        ];
        // Make sure the shortcut link is the first item in title_suffix.
        $variables['title_suffix']['add_or_remove_shortcut']['#weight'] = -100;
    }
    $variables['icon'] = '-icon-test';

}

/**
 * Implements hook_theme_registry_alter().
 */
function small_messages_theme_registry_alter(&$theme_registry)
{

    $template_path = drupal_get_path('module', 'small_messages') . '/templates';

    if (isset($theme_registry['page_title'])) {
        $hooks = $theme_registry['page_title']['preprocess functions'];
        if (($pos = array_search('small_messages_preprocess_page_title', $hooks)) !== FALSE) {
            unset($hooks[$pos]);
        }
        $hooks[] = 'small_messages_preprocess_page_title';

        $theme_registry['page_title']['preprocess functions'] = array_values($hooks);
        $theme_registry['page_title']['path'] = $template_path;
    }
}




